namespace Framework.Cli.Generate
{
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public static class NamingConventionBuiltIn
    {
        public static bool TableNameIsBuiltIn(string tableNameCSharp)
        {
            return tableNameCSharp.EndsWith("BuiltIn");
        }
    }

    public class GenerateCSharpBuiltIn
    {
        public GenerateCSharpBuiltIn(MetaCSharp metaCSharp)
        {
            this.MetaCSharp = metaCSharp;
        }

        public readonly MetaCSharp MetaCSharp;

        /// <summary>
        /// Generate CSharp namespace for every database schema.
        /// </summary>
        private static void SchemaName(MetaCSharp metaCSharp, StringBuilder result)
        {
            var schemaNameList = metaCSharp.List.GroupBy(item => new { item.Schema.SchemaName, item.SchemaNameCSharp }, (key, group) => key).ToArray();
            bool isFirst = true;
            foreach (var item in schemaNameList)
            {
                if (isFirst)
                {
                    isFirst = false;
                }
                else
                {
                    result.AppendLine();
                }
                if (TableNameClass(metaCSharp, item.SchemaName, null) > 0) // Generate CSharp schema only if it contains tables.
                {
                    result.AppendLine(string.Format("namespace DatabaseBuiltIn.{0}", item.SchemaNameCSharp));
                    result.AppendLine(string.Format("{{"));
                    result.AppendLine(string.Format("    using System.Collections.Generic;"));
                    result.AppendLine(string.Format("    using Database.{0};", item.SchemaNameCSharp));
                    result.AppendLine();
                    TableNameClass(metaCSharp, item.SchemaName, result);
                    result.AppendLine(string.Format("}}"));
                }
            }
        }

        /// <summary>
        /// Generate static CSharp class for every database table.
        /// </summary>
        private static int TableNameClass(MetaCSharp metaCSharp, string schemaName, StringBuilder result)
        {
            var tableNameList = metaCSharp.List.Where(item => item.Schema.SchemaName == schemaName).GroupBy(item => new { item.Schema.SchemaName, item.Schema.TableName, item.TableNameCSharp }, (key, group) => key).ToArray();
            tableNameList = tableNameList.Where(item => NamingConventionBuiltIn.TableNameIsBuiltIn(item.TableNameCSharp)).ToArray();
            if (result != null)
            {
                List<string> nameExceptList = new List<string>();
                bool isFirst = true;
                foreach (var item in tableNameList)
                {
                    if (isFirst)
                    {
                        isFirst = false;
                    }
                    else
                    {
                        result.AppendLine();
                    }
                    result.AppendLine(string.Format("    public static class {0}Memory", item.TableNameCSharp));
                    result.AppendLine(string.Format("    {{"));
                    result.AppendLine(string.Format("        public static List<{0}> List", item.TableNameCSharp));
                    result.AppendLine(string.Format("        {{"));
                    result.AppendLine(string.Format("            get"));
                    result.AppendLine(string.Format("            {{"));
                    result.AppendLine(string.Format("                var result = new List<{0}>();", item.TableNameCSharp));
                    result.AppendLine(string.Format("                return result;"));
                    result.AppendLine(string.Format("            }}"));
                    result.AppendLine(string.Format("        }}"));
                    result.AppendLine(string.Format("    }}"));
                }
            }
            return tableNameList.Length;
        }


        /// <summary>
        /// Generate CSharp code.
        /// </summary>
        /// <param name="isApplication">If false, generate code for cli. If true, generate code for Application.</param>
        public void Run(out string cSharp, bool isApplication)
        {
            StringBuilder result = new StringBuilder();
            result.AppendLine("// Do not modify this file. It's generated by Framework.Cli.");
            result.AppendLine();
            SchemaName(MetaCSharp, result);
            cSharp = result.ToString();
        }
    }
}
